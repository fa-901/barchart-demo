{"version":3,"sources":["ChartComp.js","App.js","index.js"],"names":["ChartComp","props","chartArea","useRef","_useState","useState","_useState2","Object","slicedToArray","svg","setG","margin","left","right","top","bottom","bar_maxW","chartID","drawChart","width","current","clientWidth","height","clientHeight","document","getElementById","innerHTML","g","d3","concat","append","attr","xAxisGroup","yAxisGroup","gObjs","update","data","remove","t","duration","subgroups","d","Group","keys","x","domain","range","paddingInner","paddingOuter","xAxisCall","tickSize","tickValues","filter","i","transition","call","selectAll","style","y","Math","max","In","Out","yAxisCall","ticks","tickFormat","tip","d3Tip","offset","html","key","val","value","react_default","a","createElement","react","className","ReactDOMServer","renderToStaticMarkup","groups","xSubgroup","bandwidth","color","groupBar","exit","enter","widthB","min","pathGen","yVal","w","r","radius","rightRoundedRect","rects","map","merge","on","show","hide","def","yGridCall","xGridCall","reportWindowSize","useEffect","window","addEventListener","removeEventListener","id","ref","App","dType","options","label","react_select_browser_esm","placeholder","onChange","v","json","rootElement","ReactDOM","render","StrictMode"],"mappings":"m6TAOe,SAASA,EAAUC,GAC9B,IAAMC,EAAYC,iBAAO,MADYC,EAEjBC,mBAAS,IAFQC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE9BK,EAF8BH,EAAA,GAEzBI,EAFyBJ,EAAA,GAG/BK,EAAS,CAAEC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IACjDC,EAAW,EACTC,EAAYhB,EAAZgB,QAiBR,SAASC,IACL,IAAMC,EAAQjB,EAAUkB,QAAQC,YAAcV,EAAOC,KAAOD,EAAOE,MAC/DS,EAASpB,EAAUkB,QAAQG,aAAeZ,EAAOG,IAAMH,EAAOI,OAErDS,SAASC,eAAeR,GAChCS,UAAY,GAEjB,IAAIC,EAAIC,IAAA,IAAAC,OAAcZ,IACjBa,OAAO,OACPC,KAAK,QAASZ,EAAQR,EAAOC,KAAOD,EAAOE,OAC3CkB,KAAK,SAAUT,EAASX,EAAOG,IAAMH,EAAOI,QAC5Ce,OAAO,KACPC,KAAK,YALF,aAAAF,OAK4BlB,EAAOC,KALnC,MAAAiB,OAK4ClB,EAAOG,IALnD,MAOFkB,EAAaL,EAAEG,OAAO,KACvBC,KAAK,YADS,gBAAAF,OACoBP,EADpB,MAEdS,KAAK,QAAS,SAEbE,EAAaN,EAAEG,OAAO,KACvBC,KAAK,QAAS,SAQfG,GANcP,EAAEG,OAAO,KACtBC,KAAK,QAAS,UAEDJ,EAAEG,OAAO,KACtBC,KAAK,QAAS,UAEP,CAAEJ,IAAGK,aAAYC,eAC7BvB,EAAKwB,GACLC,EAAOD,GAGX,SAASC,EAAOR,GAAG,IACPS,EAASnC,EAATmC,KACFjB,EAAQjB,EAAUkB,QAAQC,YAAcV,EAAOC,KAAOD,EAAOE,MAC/DS,EAASpB,EAAUkB,QAAQG,aAAeZ,EAAOG,IAAMH,EAAOI,OAGlEa,IAAa,WAAWS,SAGxB,IAAIC,EAAIV,MAAgBW,SAAS,KAE7BC,EAAYZ,IAAOQ,EAAM,SAAUK,GAAK,OAAQA,EAAEC,QAAUC,OAC5DC,EAAIhB,MACHiB,OAAOL,GACPM,MAAM,CAAC,EAAG3B,IACV4B,aAAa,IACbC,aAAa,IAEdC,EAAYrB,IAAcgB,GAAGM,SAAS,GAAGC,WAAWP,EAAEC,SAASO,OAAO,SAAUX,EAAGY,GAAK,QAASA,EAAI,MACzG1B,EAAEK,WACGsB,WAAWhB,GACXiB,KAAKN,GACLO,UAAU,QACVC,MAAM,SAAU,WAErB,IAAIC,EAAI9B,MACHiB,OAAO,CAAC,EAAGjB,IAAOQ,EAAM,SAAUK,GAAK,OAAOkB,KAAKC,IAAInB,EAAEoB,GAAIpB,EAAEqB,SAC/DhB,MAAM,CAACxB,EAAQ,IAEhByC,EAAYnC,IAAY8B,GAAGR,SAAS,GAAGc,MAAM,GAAGC,WAAW,SAACxB,GAC5D,OAAQA,EAAI,IAAOb,IAAU,MAAVA,CAAiBa,GAAKA,IAG7Cd,EAAEM,WACGqB,WAAWhB,GACXiB,KAAKQ,GACLP,UAAU,QACVC,MAAM,SAAU,WAGrB,IAAIS,EAAMC,cACLpC,KAAK,QAAS,UACdqC,OAAO,EAAE,GAAI,IACbC,KAAK,SAAC5B,GACH,IAAI6B,GAAO,OAAD7B,QAAC,IAADA,OAAA,EAAAA,EAAG6B,MAAO,GAChBC,GAAO,OAAD9B,QAAC,IAADA,OAAA,EAAAA,EAAG+B,QAAS,EAClBH,EACAI,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAOL,EAAP,KAAmBG,EAAAC,EAAAC,cAAA,QAAME,UAAU,sBAAsBN,KAIrE,OAAOO,IAAeC,qBAAqBV,KAEnD1C,EAAEA,EAAE4B,KAAKW,GAGL1B,EAAYvC,EAAM+E,OAAtB,IAGIC,EAAYrD,MACXiB,OAAOL,GACPM,MAAM,CAAC,EAAGF,EAAEsC,cACZnC,aAAa,IACbC,aAAa,IAGdmC,EAAQvD,MACPiB,OAAOL,GACPM,MAAM,CAAC,UAAW,YAGnBsC,EAAWzD,EAAEA,EAAE6B,UAAU,UACxBpB,KAAKA,EAAM,SAACK,GAAM,OAAOA,EAAEC,QAEhC0C,EAASC,OACJhD,SAEL+C,EAASE,QACJxD,OAAO,KACPC,KAAK,QAAS,SAEnBJ,EAAEA,EAAE6B,UAAU,UACTzB,KAAK,YAAa,SAAUU,GAAK,mBAAAZ,OAAoBe,EAAEH,EAAEC,OAAxB,SAGtC,IAAI6C,EAAS5B,KAAK6B,IAAIxE,EAAUiE,EAAUC,aAGtCO,EAAU,SAACnB,EAAKoB,GAChB,IAAIC,EAAIJ,EAEJK,EAAID,EAAI,EACZ,OAiDR,SAA0B/C,EAAGc,EAAGvC,EAAOG,EAAQuE,GAE3C,MAAO,KAAOjD,EAAI,IAAMc,EAClB,MAAQmC,EAAS,KAAOA,EAAS,UAAYA,EAAS,KAAOA,EAC7D,OAAS1E,EAAQ,EAAI0E,GACrB,MAAQA,EAAS,IAAMA,EAAS,UAAYA,EAAS,IAAMA,EAC3D,MAASvE,EACT,OAASH,EACT,KAzDK2E,CAFCb,EAAUX,GAESZ,EAAEgC,GAAOC,EAAGrE,EAASoC,EAAEgC,GAAOE,IAIzDG,EAAQpE,EAAEA,EAAE6B,UAAU,UAAUA,UAAU,QACzCpB,KAAK,SAAUK,GAAK,OAAOD,EAAUwD,IAAI,SAAU1B,GAAO,MAAO,CAAEA,IAAKA,EAAKE,MAAO/B,EAAE6B,QAE3FyB,EAAMV,OAAOhD,SAEb0D,EACKT,QAAQxD,OAAO,QACfC,KAAK,OAAQ,SAAAU,GAAC,OAAI0C,EAAM1C,EAAE6B,OAC1B2B,MAAMF,GAENhE,KAAK,IAAK,SAAUU,GAAK,OAAOgD,EAAQhD,EAAE6B,IAAK,KAC/C4B,GAAG,YAAahC,EAAIiC,MACpBD,GAAG,WAAYhC,EAAIkC,MACnB9C,WAAWhB,GACXP,KAAK,YAAa,SAAUU,GACzB,IAAI4D,EAAMpB,EAAUC,YAChBtC,EAAIyD,EAAM,EAAKA,EAAMrF,EAAY,EACrC,mBAAAa,OAA8B,OAAVY,EAAE6B,IAAe1B,EAAI,EAAzC,SAEHb,KAAK,IAAK,SAAUU,GAAK,OAAOgD,EAAQhD,EAAE6B,IAAK7B,EAAE+B,SAKjDzC,KAAK,OAAQ,SAAUU,GAAK,OAAO0C,EAAM1C,EAAE6B,OAGhD,IAAIgC,EAAY1E,IAAY8B,GAAGR,UAAW/B,GAAQ6C,MAAM,GAAGC,WAAW,IACtDtC,EAAEA,EAAE6B,UAAU,WAEzBF,WAAWhB,GACXiB,KAAK+C,GACL9C,UAAU,QACVC,MAAM,SAAU,QAErB,IAAI8C,EAAY3E,IAAcgB,GAAGM,SAAU5B,GAAS0C,MAAM,GAAGC,WAAW,IACxDtC,EAAEA,EAAE6B,UAAU,WAEzBF,WAAWhB,GACXiB,KAAKgD,GACL/C,UAAU,QACVC,MAAM,SAAU,QAezB,SAAS+C,IACLtF,IAGJ,OA7MAuF,oBAAU,WACNvF,KACD,IAEHuF,oBAAU,WACNhG,GAAO0B,EAAO1B,IACf,CAACR,EAAMmC,OAEVqE,oBAAU,WAEN,OADAC,OAAOC,iBAAiB,SAAUH,GAC3B,WACHE,OAAOE,oBAAoB,SAAUJ,MAmMzC/B,EAAAC,EAAAC,cAAA,OAAKkC,GAAI5F,EAAS6F,IAAK5G,wBCpNhB,SAAS6G,IAAM,IAAA3G,EACLC,mBAAS,SADJC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtB4G,EADsB1G,EAAA,GACf6B,EADe7B,EAAA,GAEzB2G,EAAU,CACb,CAAEC,MAAO,QAAS1C,MAAO,SACzB,CAAE0C,MAAO,SAAU1C,MAAO,UAC1B,CAAE0C,MAAO,UAAW1C,MAAO,YAG5B,OACCC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,IACdJ,EAAAC,EAAAC,cAAA,yBAEDF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACdJ,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CACCC,YAAY,cACZH,QAASA,EACTI,SAAU,SAACC,GAAQnF,EAAOmF,EAAE9C,QAC5BA,MAAOyC,EAAQ7D,OAAO,SAACkE,GAAD,OAAOA,EAAE9C,QAAUwC,QAI5CvC,EAAAC,EAAAC,cAAC3E,EAAD,CAAWoC,KAAMmF,EAAKP,GAAQhC,OAAQ,CAAC,KAAM,OAAQ/D,QAAS,iBC3BlE,IAAMuG,EAAchG,SAASC,eAAe,QAC5CgG,IAASC,OACPjD,EAAAC,EAAAC,cAACF,EAAAC,EAAMiD,WAAP,KACElD,EAAAC,EAAAC,cAACoC,EAAD,OAEFS","file":"static/js/main.26571356.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useRef, useState, useCallback } from \"react\";\r\nimport ReactDOMServer from 'react-dom/server';\r\nimport * as d3 from 'd3';\r\nimport d3Tip from 'd3-tip';\r\nimport \"./styles/styles.css\";\r\nimport \"./styles/tip.css\";\r\n\r\nexport default function ChartComp(props) {\r\n    const chartArea = useRef(null);\r\n    const [svg, setG] = useState('');\r\n    const margin = { left: 35, right: 50, top: 10, bottom: 30 };\r\n    const bar_maxW = 7;\r\n    const { chartID } = props;\r\n\r\n    useEffect(() => { //draw chart & initialize g first time\r\n        drawChart();\r\n    }, []);\r\n\r\n    useEffect(() => { // update chart when props data is changed\r\n        svg && update(svg);\r\n    }, [props.data]);\r\n\r\n    useEffect(() => { // event listener\r\n        window.addEventListener('resize', reportWindowSize);\r\n        return () => {\r\n            window.removeEventListener('resize', reportWindowSize);\r\n        }\r\n    });\r\n\r\n    function drawChart() {\r\n        const width = chartArea.current.clientWidth - margin.left - margin.right,\r\n            height = chartArea.current.clientHeight - margin.top - margin.bottom;\r\n\r\n        const elem = document.getElementById(chartID);\r\n        elem.innerHTML = '';\r\n\r\n        var g = d3.select(`#${chartID}`)\r\n            .append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n\r\n        const xAxisGroup = g.append(\"g\")\r\n            .attr(\"transform\", `translate(0, ${height})`)\r\n            .attr(\"class\", \"x-bar\")\r\n\r\n        const yAxisGroup = g.append(\"g\")\r\n            .attr(\"class\", \"y-bar\");\r\n\r\n        const yAxisGrid = g.append(\"g\")\r\n            .attr(\"class\", \"y-grid\");\r\n\r\n        const xAxisGrid = g.append(\"g\")\r\n            .attr(\"class\", \"x-grid\");\r\n\r\n        var gObjs = { g, xAxisGroup, yAxisGroup };\r\n        setG(gObjs);\r\n        update(gObjs);\r\n    }\r\n\r\n    function update(g) {\r\n        const { data } = props;\r\n        const width = chartArea.current.clientWidth - margin.left - margin.right,\r\n            height = chartArea.current.clientHeight - margin.top - margin.bottom;\r\n\r\n        //remove old tips\r\n        d3.selectAll('.d3-tip').remove();\r\n\r\n        //transition function.\r\n        var t = d3.transition().duration(300);\r\n\r\n        var subgroups = d3.map(data, function (d) { return (d.Group) }).keys();\r\n        var x = d3.scaleBand()\r\n            .domain(subgroups)\r\n            .range([0, width])\r\n            .paddingInner(0.3)\r\n            .paddingOuter(0.3);\r\n\r\n        var xAxisCall = d3.axisBottom(x).tickSize(0).tickValues(x.domain().filter(function (d, i) { return !(i % 3) }));\r\n        g.xAxisGroup\r\n            .transition(t)\r\n            .call(xAxisCall)\r\n            .selectAll(\"path\")\r\n            .style(\"stroke\", \"#E0E7FF\");\r\n\r\n        var y = d3.scaleLinear()\r\n            .domain([0, d3.max(data, function (d) { return Math.max(d.In, d.Out) })])\r\n            .range([height, 0]);\r\n\r\n        var yAxisCall = d3.axisLeft(y).tickSize(0).ticks(5).tickFormat((d) => {\r\n            return (d > 999) ? d3.format(\".2s\")(d) : d;\r\n        });\r\n\r\n        g.yAxisGroup\r\n            .transition(t)\r\n            .call(yAxisCall)\r\n            .selectAll(\"path\")\r\n            .style(\"stroke\", \"#E0E7FF\");\r\n\r\n        //show tip\r\n        var tip = d3Tip()\r\n            .attr('class', 'd3-tip')\r\n            .offset([-10, 0])\r\n            .html((d) => {\r\n                var key = d?.key || '';\r\n                var val = d?.value || 0;\r\n                let html = (\r\n                    <Fragment>\r\n                        <div>\r\n                            <span>{key}:</span><span className='ml-2 text-standard'>{val}</span>\r\n                        </div>\r\n                    </Fragment>\r\n                )\r\n                return ReactDOMServer.renderToStaticMarkup(html);\r\n            });\r\n        g.g.call(tip);\r\n\r\n        // var subgroups = ['In', 'Out'];\r\n        var subgroups = props.groups;\r\n\r\n        //Subgroup scale\r\n        var xSubgroup = d3.scaleBand()\r\n            .domain(subgroups)\r\n            .range([0, x.bandwidth()])\r\n            .paddingInner(0.2)\r\n            .paddingOuter(0.5)\r\n\r\n        //color scale\r\n        var color = d3.scaleOrdinal()\r\n            .domain(subgroups)\r\n            .range(['#2E5BFF', '#081348']);\r\n\r\n        //destroy old & create grouped bars\r\n        var groupBar = g.g.selectAll(\".items\")\r\n            .data(data, (d)=>{ return d.Group });\r\n\r\n        groupBar.exit()\r\n            .remove();\r\n\r\n        groupBar.enter()\r\n            .append('g')\r\n            .attr(\"class\", \"items\");\r\n\r\n        g.g.selectAll(\".items\")\r\n            .attr(\"transform\", function (d) { return `translate(${x(d.Group)},0)`; });\r\n\r\n        //set width of bars\r\n        var widthB = Math.min(bar_maxW, xSubgroup.bandwidth());\r\n\r\n        //create rounded rectangle path\r\n        var pathGen = (key, yVal) => {\r\n            let w = widthB;\r\n            let x = xSubgroup(key);\r\n            let r = w / 2;\r\n            return rightRoundedRect(x, y(yVal), w, height - y(yVal), r);\r\n        }\r\n\r\n        //create & update bars\r\n        var rects = g.g.selectAll('.items').selectAll('path')\r\n            .data(function (d) { return subgroups.map(function (key) { return { key: key, value: d[key] }; }); })\r\n\r\n        rects.exit().remove();\r\n\r\n        rects\r\n            .enter().append(\"path\")\r\n            .attr(\"fill\", d => color(d.key))\r\n            .merge(rects)\r\n            // .attr(\"y\", y(0))\r\n            .attr(\"d\", function (d) { return pathGen(d.key, 0) })\r\n            .on('mouseover', tip.show)\r\n            .on('mouseout', tip.hide)\r\n            .transition(t) /** for rectangles only */\r\n            .attr(\"transform\", function (d) { //puts bars close together\r\n                let def = xSubgroup.bandwidth();\r\n                let x = def > 0 ? (def - bar_maxW) : 0;\r\n                return `translate(${d.key === 'In' ? x : 0},0)`;\r\n            })\r\n            .attr(\"d\", function (d) { return pathGen(d.key, d.value) })\r\n            // .attr(\"x\", function (d) { return xSubgroup(d.key); }) /** for rectangles only */\r\n            // .attr(\"y\", function (d) { return y(d.value); })\r\n            // .attr(\"width\", Math.min(bar_maxW, xSubgroup.bandwidth()))\r\n            // .attr(\"height\", function (d) { return height - y(d.value); })\r\n            .attr(\"fill\", function (d) { return color(d.key); });\r\n\r\n        //create gridlines\r\n        var yGridCall = d3.axisLeft(y).tickSize((-width)).ticks(5).tickFormat('');\r\n        var yAxisGrid = g.g.selectAll('.y-grid');\r\n        yAxisGrid\r\n            .transition(t)\r\n            .call(yGridCall)\r\n            .selectAll(\"path\")\r\n            .style(\"stroke\", \"none\");\r\n\r\n        var xGridCall = d3.axisBottom(x).tickSize((height)).ticks(5).tickFormat('');\r\n        var xAxisGrid = g.g.selectAll('.x-grid');\r\n        xAxisGrid\r\n            .transition(t)\r\n            .call(xGridCall)\r\n            .selectAll(\"path\")\r\n            .style(\"stroke\", \"none\");\r\n\r\n    }\r\n\r\n    function rightRoundedRect(x, y, width, height, radius) {\r\n        // round on top left and right\r\n        return \"M \" + x + \",\" + y\r\n            + \" a \" + radius + \",-\" + radius + \" 0 0 1 \" + radius + \",-\" + radius\r\n            + \" h \" + (width - 2 * radius)\r\n            + \" a \" + radius + \",\" + radius + \" 0 0 1 \" + radius + \",\" + radius\r\n            + \" v \" + (height)\r\n            + \" h -\" + width\r\n            + \" z\";\r\n    }\r\n\r\n    function reportWindowSize() {\r\n        drawChart();\r\n    }\r\n\r\n    return (\r\n        <div id={chartID} ref={chartArea}></div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\n// import ReactDOMServer from 'react-dom/server';\r\nimport \"./styles/styles.css\";\r\nimport \"./styles/tip.css\";\r\nimport ChartComp from './ChartComp';\r\nimport json from './data/data.json';\r\nimport Select from 'react-select';\r\n\r\nexport default function App() {\r\n\tconst [dType, update] = useState('daily');\r\n\tvar options = [\r\n\t\t{ label: 'Daily', value: 'daily' },\r\n\t\t{ label: 'Weekly', value: 'weekly' },\r\n\t\t{ label: 'Monthly', value: 'monthly' },\r\n\t]\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<div className=\"container card my-3 p-3\">\r\n\t\t\t\t<div className='d-flex'>\r\n\t\t\t\t\t<div className=''>\r\n\t\t\t\t\t\t<h4>Chart Demo</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='ml-auto w-25'>\r\n\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\tplaceholder='Select Data'\r\n\t\t\t\t\t\t\toptions={options}\r\n\t\t\t\t\t\t\tonChange={(v) => { update(v.value) }}\r\n\t\t\t\t\t\t\tvalue={options.filter((v) => v.value === dType)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ChartComp data={json[dType]} groups={['In', 'Out']} chartID={'chart-area'} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}